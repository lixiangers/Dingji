package com.lixiangers.dingji.dao;

import com.lixiangers.dingji.R;
import com.lixiangers.dingji.util.Constant;
import com.lixiangers.dingji.util.StringUtil;

import java.util.ArrayList;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table GOODS.
 */
public class Goods implements java.io.Serializable {

    private String id;
    private String name;
    private String des;
    private String unit;
    private Integer price;
    private String imageList;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient GoodsDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Goods() {
    }

    public Goods(String id) {
        this.id = id;
    }

    public Goods(String id, String name, String des, String unit, Integer price, String imageList) {
        this.id = id;
        this.name = name;
        this.des = des;
        this.unit = unit;
        this.price = price;
        this.imageList = imageList;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGoodsDao() : null;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDes() {
        return des;
    }

    public void setDes(String des) {
        this.des = des;
    }

    public String getUnit() {
        return unit;
    }

    public void setUnit(String unit) {
        this.unit = unit;
    }

    public Integer getPrice() {
        return price;
    }

    public void setPrice(Integer price) {
        this.price = price;
    }

    public String getImageList() {
        return imageList;
    }

    public void setImageList(String imageList) {
        this.imageList = imageList;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }


    // KEEP METHODS - put your custom methods here
    public ArrayList<String> getImageArrayList() {
        ArrayList<String> arrayList = new ArrayList<String>();
        String[] urls = getImageList().split(Constant.PICTURE_IMAGE_URL_SPLIT);
        for (String url : urls) {
            if (!url.equals(""))
                arrayList.add(url);
        }
        return arrayList;
    }

    public void setImageArrayList(ArrayList<String> bitmapList) {
        String urls = "";
        if (bitmapList != null) {
            for (int i = 0; i < bitmapList.size(); i++) {
                urls += bitmapList.get(i);

                if (i < bitmapList.size() - 1)
                    urls += Constant.PICTURE_IMAGE_URL_SPLIT;
            }
        }

        setImageList(urls);
    }

    public float getPriceOfYuan() {
        return getPrice() / 100f;
    }

    public String getPriceAndUnit() {
        return StringUtil.formatTemplateString(R.string.price_unit,
                getPriceOfYuan(), getUnit());
    }
    // KEEP METHODS END

}
